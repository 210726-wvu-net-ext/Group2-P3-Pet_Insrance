#Front End
trigger:
- master

pr:
- master
- Main-Dev

pool:
  vmImage: ubuntu-latest

variables: #Path to folders
  angular: '$(Build.SourcesDirectory)/Client'
  cReg: '2107-p3-acr-Group2-Pet Insurance'

stages:
- stage: Angular
  #Runs NPM Installs
  jobs:
    - job: Main
      displayName: 'NG Build and Test'
      steps:
    #Install Node
      - task: NodeTool@0
        displayName: 'Install Node.js'
        inputs:
          versionSpec: '14.x'
    #Install Angular
      - task: CmdLine@2
        displayName: Install Angular
        inputs:
          script: 'npm install -g @angular/cli'
          workingDirectory: $(angular)
    #Restore
      - task: CmdLine@2
        displayName: NPM CI
        inputs:
          script: 'npm ci'
          workingDirectory: $(angular)
    #Build Angular App
      - task: AngularCLI@1
        displayName: Angular Build
        inputs:
          command: 'build'
          project: '$(angular)'
          DisableAnalytics: false
    #Test Angular App
      - task: CmdLine@2
        displayName: Angular Tests
        inputs:
          script: 'npx ng test --browsers=ChromeHeadless --code-coverage --watch=false'
          workingDirectory: $(angular)
        continueOnError: true #Does not interupt the pipeline if the tests fail
    #Sonar Cloud Steps
      - task: SonarCloudPrepare@1
        inputs:
          SonarCloud: 'Insurance UI Scanner'
          organization: '210726-wvu-net-ext'
          scannerMode: 'CLI'
          configMode: 'manual'
          cliProjectKey: '210726-wvu-net-ext_Group2-P3-Pet_UI'
          cliSources: '$(angular)/src'
          extraProperties: |
            sonar.javascript.lcov.reportPaths=client/coverage/client/lcov.info
            sonar.coverage.exclusions=**/*.spec.ts
      - task: SonarCloudAnalyze@1
        displayName: sonar run analysis

      - task: SonarCloudPublish@1
        displayName: sonar publish analysis result

- stage: Docker
  jobs:
  #Build and eventally deploy a docker container
    - job: Docker_Build
      displayName: Docker Build & Push
      steps:
      #Login
      - task: Docker@2
        displayName: Login
        inputs:
          containerRegistry: $(cReg)
          command: 'login'
      #Build
      - task: Docker@2
        displayName: Build & Push
        inputs:
          containerRegistry: '$(cReg)'
          repository: 'gecko/frontend'
          command: 'buildAndPush'
          Dockerfile: '**/Dockerfile'
          tags: 'latest'
      #Publish artifact
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(angular)/Client.yml'
          artifact: 'manifest'
          publishLocation: 'pipeline'
      #logout
      - task: Docker@2
        displayName: Logout
        inputs:
          containerRegistry: $(cReg)
          command: 'logout'
